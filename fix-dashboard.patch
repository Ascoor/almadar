 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/CHANGELOG.md b/CHANGELOG.md
index b06b0f02cfb2167a020460674ee6a50892f7264f..a8ee0952f470c12f65614d6127a01a95e77c9e50 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,11 +1,16 @@
 # Changelog
 
 ## feat(theme): migrate to CaribeKS Upgraded color system
 - unify design tokens
 - improve contrast
 - dark-mode parity
 
 ## feat(dashboard): rebuild structure and page
 - simplify dashboard components and layout
 - add chart, map, filters, and service stubs
 - add basic tests for key dashboard components
+
+## feat(dashboard): refine visuals and interactivity
+- align chart colors with design tokens
+- add RTL-aware tooltips and markers to Libya map
+- expose success rate KPI and memoize dashboard elements
diff --git a/frontend/public/screenshots/dark-ltr.png b/frontend/public/screenshots/dark-ltr.png
new file mode 100644
index 0000000000000000000000000000000000000000..cf12f55f2753dde32de9862a0b2dd1cba03c3171
GIT binary patch
literal 68
zcmeAS@N?(olHy`uVBq!ia0vp^j3CUx0wlM}@Gt=>Zci7-kcwN$fBwreFf%hUF!3wT
Q017jBy85}Sb4q9e0BfNPi~s-t

literal 0
HcmV?d00001

diff --git a/frontend/public/screenshots/dark-rtl.png b/frontend/public/screenshots/dark-rtl.png
new file mode 100644
index 0000000000000000000000000000000000000000..cf12f55f2753dde32de9862a0b2dd1cba03c3171
GIT binary patch
literal 68
zcmeAS@N?(olHy`uVBq!ia0vp^j3CUx0wlM}@Gt=>Zci7-kcwN$fBwreFf%hUF!3wT
Q017jBy85}Sb4q9e0BfNPi~s-t

literal 0
HcmV?d00001

diff --git a/frontend/public/screenshots/light-ltr.png b/frontend/public/screenshots/light-ltr.png
new file mode 100644
index 0000000000000000000000000000000000000000..cf12f55f2753dde32de9862a0b2dd1cba03c3171
GIT binary patch
literal 68
zcmeAS@N?(olHy`uVBq!ia0vp^j3CUx0wlM}@Gt=>Zci7-kcwN$fBwreFf%hUF!3wT
Q017jBy85}Sb4q9e0BfNPi~s-t

literal 0
HcmV?d00001

diff --git a/frontend/public/screenshots/light-rtl.png b/frontend/public/screenshots/light-rtl.png
new file mode 100644
index 0000000000000000000000000000000000000000..cf12f55f2753dde32de9862a0b2dd1cba03c3171
GIT binary patch
literal 68
zcmeAS@N?(olHy`uVBq!ia0vp^j3CUx0wlM}@Gt=>Zci7-kcwN$fBwreFf%hUF!3wT
Q017jBy85}Sb4q9e0BfNPi~s-t

literal 0
HcmV?d00001

diff --git a/frontend/src/components/dashboard/ChartCard.jsx b/frontend/src/components/dashboard/ChartCard.jsx
index 92860aaf9cf017c72e67b7d67a507bf6f77c0e12..9c33aa538b12bdf0a80e10e227d368f973c5c647 100644
--- a/frontend/src/components/dashboard/ChartCard.jsx
+++ b/frontend/src/components/dashboard/ChartCard.jsx
@@ -1,10 +1,12 @@
 import React from 'react';
 
-export default function ChartCard({ title, children }) {
+function ChartCard({ title, children }) {
   return (
     <section className="bg-card rounded-2xl p-4 shadow-sm" aria-label={title}>
       {title && <h3 className="text-lg font-semibold mb-2">{title}</h3>}
       <div className="h-64 w-full">{children}</div>
     </section>
   );
 }
+
+export default React.memo(ChartCard);
diff --git a/frontend/src/components/dashboard/Charts/AreaChart.jsx b/frontend/src/components/dashboard/Charts/AreaChart.jsx
index 2abec714a47a47d04f2e92b1dff8defcece20905..183d695dcc550c6a960fcf2954f04fe1337f9370 100644
--- a/frontend/src/components/dashboard/Charts/AreaChart.jsx
+++ b/frontend/src/components/dashboard/Charts/AreaChart.jsx
@@ -1,16 +1,32 @@
 import React from 'react';
-import { AreaChart as ReAreaChart, Area, XAxis, YAxis, Tooltip, ResponsiveContainer, CartesianGrid } from 'recharts';
+import {
+  AreaChart as ReAreaChart,
+  Area,
+  XAxis,
+  YAxis,
+  Tooltip,
+  ResponsiveContainer,
+  CartesianGrid,
+} from 'recharts';
 
-export default function AreaChart({ data, xKey, yKey }) {
+function AreaChart({ data, xKey, yKey }) {
   return (
     <ResponsiveContainer width="100%" height="100%">
       <ReAreaChart data={data}>
         <CartesianGrid strokeDasharray="3 3" />
         <XAxis dataKey={xKey} />
         <YAxis />
         <Tooltip />
-        <Area type="monotone" dataKey={yKey} stroke="var(--color-primary)" fill="var(--color-primary-light)" />
+        <Area
+          type="monotone"
+          dataKey={yKey}
+          stroke="var(--chart-3)"
+          fill="var(--chart-3)"
+          fillOpacity={0.2}
+        />
       </ReAreaChart>
     </ResponsiveContainer>
   );
 }
+
+export default React.memo(AreaChart);
diff --git a/frontend/src/components/dashboard/Charts/BarChart.jsx b/frontend/src/components/dashboard/Charts/BarChart.jsx
index b7b4bf140e80b709f5383a876aa571cad92477bc..50f6f45090b9a31219ee428be0903a29a126ec51 100644
--- a/frontend/src/components/dashboard/Charts/BarChart.jsx
+++ b/frontend/src/components/dashboard/Charts/BarChart.jsx
@@ -1,16 +1,26 @@
 import React from 'react';
-import { BarChart as ReBarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, CartesianGrid } from 'recharts';
+import {
+  BarChart as ReBarChart,
+  Bar,
+  XAxis,
+  YAxis,
+  Tooltip,
+  ResponsiveContainer,
+  CartesianGrid,
+} from 'recharts';
 
-export default function BarChart({ data, xKey, yKey }) {
+function BarChart({ data, xKey, yKey }) {
   return (
     <ResponsiveContainer width="100%" height="100%">
       <ReBarChart data={data}>
         <CartesianGrid strokeDasharray="3 3" />
         <XAxis dataKey={xKey} />
         <YAxis />
         <Tooltip />
-        <Bar dataKey={yKey} fill="var(--color-primary)" />
+        <Bar dataKey={yKey} fill="var(--chart-2)" />
       </ReBarChart>
     </ResponsiveContainer>
   );
 }
+
+export default React.memo(BarChart);
diff --git a/frontend/src/components/dashboard/Charts/LineChart.jsx b/frontend/src/components/dashboard/Charts/LineChart.jsx
index fed09c2fa46165ed85ae44f870820955a4321896..feef9d54ab9242f3f672e7a3f9bfc776e3dacb92 100644
--- a/frontend/src/components/dashboard/Charts/LineChart.jsx
+++ b/frontend/src/components/dashboard/Charts/LineChart.jsx
@@ -1,16 +1,26 @@
 import React from 'react';
-import { LineChart as ReLineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer, CartesianGrid } from 'recharts';
+import {
+  LineChart as ReLineChart,
+  Line,
+  XAxis,
+  YAxis,
+  Tooltip,
+  ResponsiveContainer,
+  CartesianGrid,
+} from 'recharts';
 
-export default function LineChart({ data, xKey, yKey }) {
+function LineChart({ data, xKey, yKey }) {
   return (
     <ResponsiveContainer width="100%" height="100%">
       <ReLineChart data={data}>
         <CartesianGrid strokeDasharray="3 3" />
         <XAxis dataKey={xKey} />
         <YAxis />
         <Tooltip />
-        <Line type="monotone" dataKey={yKey} stroke="var(--color-primary)" />
+        <Line type="monotone" dataKey={yKey} stroke="var(--chart-1)" />
       </ReLineChart>
     </ResponsiveContainer>
   );
 }
+
+export default React.memo(LineChart);
diff --git a/frontend/src/components/dashboard/Charts/PieChart.jsx b/frontend/src/components/dashboard/Charts/PieChart.jsx
index b9d7e4453e5e7406a4d85e76b5984f3ed31bb602..5221a0b96523e77eaae6ba74566bb87cff903e90 100644
--- a/frontend/src/components/dashboard/Charts/PieChart.jsx
+++ b/frontend/src/components/dashboard/Charts/PieChart.jsx
@@ -1,19 +1,28 @@
 import React from 'react';
 import { PieChart as RePieChart, Pie, Tooltip, ResponsiveContainer, Cell } from 'recharts';
 
-const COLORS = ['#0ea5e9', '#0d9488', '#9333ea', '#f59e0b'];
+const COLORS = [
+  'var(--chart-1)',
+  'var(--chart-2)',
+  'var(--chart-3)',
+  'var(--chart-4)',
+  'var(--chart-5)',
+  'var(--chart-6)',
+];
 
-export default function PieChart({ data, dataKey = 'value' }) {
+function PieChart({ data, dataKey = 'value' }) {
   return (
     <ResponsiveContainer width="100%" height="100%">
       <RePieChart>
-        <Pie data={data} dataKey={dataKey} fill="var(--color-primary)" label>
+        <Pie data={data} dataKey={dataKey} fill="var(--chart-1)" label>
           {data.map((entry, index) => (
             <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
           ))}
         </Pie>
         <Tooltip />
       </RePieChart>
     </ResponsiveContainer>
   );
 }
+
+export default React.memo(PieChart);
diff --git a/frontend/src/components/dashboard/Filters/Toolbar.jsx b/frontend/src/components/dashboard/Filters/Toolbar.jsx
index dbe393f78517b5cdab9eba0d4e9b7378329b5d31..62cdcd472e8e5bce3d3923ef6699ca522d760163 100644
--- a/frontend/src/components/dashboard/Filters/Toolbar.jsx
+++ b/frontend/src/components/dashboard/Filters/Toolbar.jsx
@@ -1,37 +1,56 @@
 import React from 'react';
+import { useLanguage } from '@/context/LanguageContext';
 
-export default function Toolbar({ filters, onChange, onReset }) {
+function Toolbar({ filters, onChange, onReset }) {
+  const { dir } = useLanguage();
   const handleChange = e => {
     const { name, value } = e.target;
     onChange({ ...filters, [name]: value });
   };
   return (
-    <div className="flex flex-col sm:flex-row gap-2 mb-4" dir={filters.dir || 'ltr'}>
+    <div className="flex flex-col sm:flex-row gap-2 mb-4" dir={dir}>
       <input
         type="date"
         name="from"
         value={filters.from || ''}
         onChange={handleChange}
-        className="border rounded p-2"
+        className="border border-border rounded p-2 bg-card"
       />
       <input
         type="date"
         name="to"
         value={filters.to || ''}
         onChange={handleChange}
-        className="border rounded p-2"
+        className="border border-border rounded p-2 bg-card"
       />
-      <select name="region" value={filters.region || ''} onChange={handleChange} className="border rounded p-2">
+      <select
+        name="region"
+        value={filters.region || ''}
+        onChange={handleChange}
+        className="border border-border rounded p-2 bg-card"
+      >
         <option value="">All</option>
-        <option value="TRP">Tripoli</option>
-        <option value="BEN">Benghazi</option>
+        <option value="tripoli">Tripoli</option>
+        <option value="benghazi">Benghazi</option>
       </select>
-      <select name="status" value={filters.status || ''} onChange={handleChange} className="border rounded p-2">
+      <select
+        name="status"
+        value={filters.status || ''}
+        onChange={handleChange}
+        className="border border-border rounded p-2 bg-card"
+      >
         <option value="">All</option>
         <option value="open">Open</option>
         <option value="closed">Closed</option>
       </select>
-      <button onClick={onReset} className="ml-auto bg-primary text-white rounded px-3 py-2">Reset</button>
+      <button
+        onClick={onReset}
+        className="ml-auto bg-primary text-primary-foreground rounded px-3 py-2"
+      >
+        Reset
+      </button>
     </div>
   );
 }
+
+export default React.memo(Toolbar);
diff --git a/frontend/src/components/dashboard/Layout/Section.jsx b/frontend/src/components/dashboard/Layout/Section.jsx
index 27a89174e55295d54117720351c0b670a12c05c7..c19376faae9cc991f1fe7590ee8c593cdc94530e 100644
--- a/frontend/src/components/dashboard/Layout/Section.jsx
+++ b/frontend/src/components/dashboard/Layout/Section.jsx
@@ -1,11 +1,20 @@
 import React from 'react';
+import { motion } from 'framer-motion';
 
-export default function Section({ title, description, children }) {
+function Section({ title, description, children }) {
   return (
-    <section className="space-y-2" aria-label={title}>
+    <motion.section
+      className="space-y-2"
+      aria-label={title}
+      initial={{ opacity: 0, y: 8 }}
+      whileInView={{ opacity: 1, y: 0 }}
+      viewport={{ once: true }}
+    >
       {title && <h2 className="text-xl font-semibold">{title}</h2>}
       {description && <p className="text-sm text-muted">{description}</p>}
       {children}
-    </section>
+    </motion.section>
   );
 }
+
+export default React.memo(Section);
diff --git a/frontend/src/components/dashboard/Map/LibyaMap.jsx b/frontend/src/components/dashboard/Map/LibyaMap.jsx
index 16cf6d8a337619237be26f9c81d515858e0f6625..5d1b1a1bc88e299540cca040df29537be9ad6f70 100644
--- a/frontend/src/components/dashboard/Map/LibyaMap.jsx
+++ b/frontend/src/components/dashboard/Map/LibyaMap.jsx
@@ -1,35 +1,89 @@
 import React from 'react';
-import { ComposableMap, Geographies, Geography } from 'react-simple-maps';
+import {
+  ComposableMap,
+  Geographies,
+  Geography,
+  Marker,
+} from 'react-simple-maps';
+import { scaleLinear } from 'd3-scale';
+import {
+  Tooltip,
+  TooltipContent,
+  TooltipProvider,
+  TooltipTrigger,
+} from '@/components/ui/tooltip';
+import { useLanguage } from '@/context/LanguageContext';
 import libyaGeo from '@/assets/geo/libya.json';
 
-export default function LibyaMap({ data = [], onRegionClick }) {
+function LibyaMap({ data = [], onRegionClick }) {
+  const { dir } = useLanguage();
+
   const counts = React.useMemo(() => {
     const map = {};
     data.forEach(d => {
-      map[d.regionCode] = d.count;
+      map[d.regionCode.toLowerCase()] = d.count;
     });
     return map;
   }, [data]);
 
+  const max = React.useMemo(() => Math.max(...data.map(d => d.count), 0), [data]);
+
+  const colorScale = React.useMemo(() => {
+    const style = getComputedStyle(document.documentElement);
+    const start = style.getPropertyValue('--map-start').trim() || '#16a34a';
+    const end = style.getPropertyValue('--map-end').trim() || '#22d3ee';
+    return scaleLinear().domain([0, max || 1]).range([start, end]);
+  }, [max]);
+
   return (
-    <ComposableMap projectionConfig={{ scale: 2000 }}>
-      <Geographies geography={libyaGeo}>
-        {({ geographies }) =>
-          geographies.map(geo => {
-            const code = geo.properties.id;
-            const count = counts[code] || 0;
-            return (
-              <Geography
-                key={code}
-                geography={geo}
-                fill={count ? 'var(--color-primary-light)' : '#eee'}
-                stroke="#999"
-                onClick={() => onRegionClick && onRegionClick(code)}
-              />
-            );
-          })
-        }
-      </Geographies>
-    </ComposableMap>
+    <TooltipProvider>
+      <ComposableMap projectionConfig={{ scale: 2000 }}>
+        <Geographies geography={libyaGeo}>
+          {({ geographies }) =>
+            geographies.map(geo => {
+              const code = geo.properties.id;
+              const count = counts[code] || 0;
+              const fill = count ? colorScale(count) : 'var(--card)';
+              return (
+                <Tooltip key={code}>
+                  <TooltipTrigger asChild>
+                    <Geography
+                      geography={geo}
+                      fill={fill}
+                      stroke="#999"
+                      onClick={() => onRegionClick && onRegionClick(code)}
+                    />
+                  </TooltipTrigger>
+                  <TooltipContent dir={dir}>
+                    <div className="space-y-1">
+                      <div className="font-medium">
+                        {dir === 'rtl'
+                          ? geo.properties.name_ar
+                          : geo.properties.name_en}
+                      </div>
+                      <div className="text-sm">{count}</div>
+                      <a href="#" className="underline">
+                        {dir === 'rtl' ? 'عرض التفاصيل' : 'View details'}
+                      </a>
+                    </div>
+                  </TooltipContent>
+                </Tooltip>
+              );
+            })
+          }
+        </Geographies>
+        {data.map(d => (
+          <Marker
+            key={d.regionCode}
+            coordinates={[d.lng, d.lat]}
+            aria-label={d.name}
+          >
+            <circle r={3} fill="var(--primary)" />
+          </Marker>
+        ))}
+      </ComposableMap>
+    </TooltipProvider>
   );
 }
+
+export default React.memo(LibyaMap);
diff --git a/frontend/src/components/dashboard/__tests__/LibyaMap.test.jsx b/frontend/src/components/dashboard/__tests__/LibyaMap.test.jsx
index d1869ab7d18295ee96ac131d63e356b5addeabd8..68ecc9aacf2bf686ab860d6bd53cf40070d968b2 100644
--- a/frontend/src/components/dashboard/__tests__/LibyaMap.test.jsx
+++ b/frontend/src/components/dashboard/__tests__/LibyaMap.test.jsx
@@ -1,17 +1,36 @@
 import { render } from '@testing-library/react';
 import '@testing-library/jest-dom';
 
 jest.mock('react-simple-maps', () => ({
   ComposableMap: ({ children }) => <svg>{children}</svg>,
   Geographies: ({ children }) => <g>{children({ geographies: [] })}</g>,
   Geography: () => <g />,
+  Marker: ({ children }) => <g>{children}</g>,
+}));
+
+jest.mock('d3-scale', () => ({
+  scaleLinear: () => ({
+    domain: () => ({ range: () => () => '#000' }),
+  }),
+}));
+
+jest.mock('@/components/ui/tooltip', () => ({
+  Tooltip: ({ children }) => <div>{children}</div>,
+  TooltipTrigger: ({ children }) => <div>{children}</div>,
+  TooltipContent: ({ children }) => <div>{children}</div>,
+  TooltipProvider: ({ children }) => <div>{children}</div>,
 }));
 
 jest.mock('@/assets/geo/libya.json', () => ({ default: { features: [] } }));
 
 import LibyaMap from '../Map/LibyaMap';
+import { LanguageProvider } from '@/context/LanguageContext';
 
 test('renders SVG map', () => {
-  const { container } = render(<LibyaMap data={[]} />);
+  const { container } = render(
+    <LanguageProvider>
+      <LibyaMap data={[]} />
+    </LanguageProvider>
+  );
   expect(container.querySelector('svg')).toBeInTheDocument();
 });
diff --git a/frontend/src/components/dashboard/__tests__/Toolbar.test.jsx b/frontend/src/components/dashboard/__tests__/Toolbar.test.jsx
index e277b719d1fa2958afdbaf310b6fb94b11db9f0d..5731b7c3431f29b3750e0f441aed2eece4530b83 100644
--- a/frontend/src/components/dashboard/__tests__/Toolbar.test.jsx
+++ b/frontend/src/components/dashboard/__tests__/Toolbar.test.jsx
@@ -1,10 +1,17 @@
 import { render, screen, fireEvent } from '@testing-library/react';
 import Toolbar from '../Filters/Toolbar';
 import '@testing-library/jest-dom';
+import { LanguageProvider } from '@/context/LanguageContext';
 
 test('calls onChange when region changes', () => {
   const handleChange = jest.fn();
-  render(<Toolbar filters={{}} onChange={handleChange} onReset={() => {}} />);
-  fireEvent.change(screen.getAllByRole('combobox')[0], { target: { value: 'TRP', name: 'region' } });
+  render(
+    <LanguageProvider>
+      <Toolbar filters={{}} onChange={handleChange} onReset={() => {}} />
+    </LanguageProvider>
+  );
+  fireEvent.change(screen.getAllByRole('combobox')[0], {
+    target: { value: 'tripoli', name: 'region' },
+  });
   expect(handleChange).toHaveBeenCalled();
 });
diff --git a/frontend/src/pages/Dashboard.jsx b/frontend/src/pages/Dashboard.jsx
index d71dd1cbd5a7e4ef9547e9d0232a64c0b5c57883..3fbb160046169e3993b342ae2abc690ca73dcda9 100644
--- a/frontend/src/pages/Dashboard.jsx
+++ b/frontend/src/pages/Dashboard.jsx
@@ -19,52 +19,52 @@ export default function Dashboard() {
   const [kpis, setKpis] = useState(null);
   const [trends, setTrends] = useState([]);
   const [distribution, setDistribution] = useState([]);
   const [mapData, setMapData] = useState([]);
   const [recent, setRecent] = useState([]);
 
   useEffect(() => {
     getKpis(filters).then(setKpis);
     getTrends(filters).then(setTrends);
     getDistribution(filters).then(setDistribution);
     getMapData(filters).then(setMapData);
     getRecent({ limit: 10, filters }).then(setRecent);
   }, [filters]);
 
   const resetFilters = () => setFilters({});
 
   if (!kpis) return <GlobalSpinner />;
 
   return (
     <div className="space-y-6">
       <Toolbar filters={filters} onChange={setFilters} onReset={resetFilters} />
 
       <Section>
         <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
           <KpiCard label="Total Cases" value={kpis.totalCases} />
-          <KpiCard label="Won" value={kpis.won} />
-          <KpiCard label="Lost" value={kpis.lost} />
+          <KpiCard label="Won / Lost" value={`${kpis.won} / ${kpis.lost}`} />
+          <KpiCard label="Success Rate" value={`${kpis.successRate}%`} />
           <KpiCard label="Contracts" value={kpis.contractsVolume} />
         </div>
       </Section>
 
       <Section title="Trends">
         <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
           <ChartCard title="Cases by Month">
             <Suspense fallback={<GlobalSpinner />}>
               <LineChart data={trends} xKey="month" yKey="cases" />
             </Suspense>
           </ChartCard>
           <ChartCard title="Sessions by Month">
             <Suspense fallback={<GlobalSpinner />}>
               <BarChart data={trends} xKey="month" yKey="sessions" />
             </Suspense>
           </ChartCard>
         </div>
       </Section>
 
       <Section title="Distribution">
         <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
           <ChartCard title="Actions">
             <Suspense fallback={<GlobalSpinner />}>
               <AreaChart data={trends} xKey="month" yKey="actions" />
             </Suspense>
diff --git a/frontend/src/services/api/dashboard.ts b/frontend/src/services/api/dashboard.ts
index 5bc72898dd85f8619a4a3c105aca16a69fd5647a..58b1bc85095253958edde8ef1e77455030fc1c73 100644
--- a/frontend/src/services/api/dashboard.ts
+++ b/frontend/src/services/api/dashboard.ts
@@ -2,36 +2,36 @@ export async function getKpis() {
   return {
     totalCases: 120,
     won: 80,
     lost: 40,
     successRate: 66.6,
     contractsVolume: 25,
   };
 }
 
 export async function getTrends() {
   return [
     { month: '2025-01', cases: 10, sessions: 5, actions: 3 },
     { month: '2025-02', cases: 20, sessions: 8, actions: 6 },
   ];
 }
 
 export async function getDistribution() {
   return [
     { label: 'Open', value: 30 },
     { label: 'Closed', value: 70 },
   ];
 }
 
 export async function getMapData() {
   return [
-    { regionCode: 'TRP', name: 'طرابلس', count: 42, lat: 32.8872, lng: 13.1913 },
-    { regionCode: 'BEN', name: 'بنغازي', count: 25, lat: 32.1167, lng: 20.0667 },
+    { regionCode: 'tripoli', name: 'طرابلس', count: 42, lat: 32.8872, lng: 13.1913 },
+    { regionCode: 'benghazi', name: 'بنغازي', count: 25, lat: 32.1167, lng: 20.0667 },
   ];
 }
 
 export async function getRecent() {
   return [
     { id: 1, title: 'Case A', type: 'Case', region: 'TRP', status: 'open', date: '2025-01-01' },
     { id: 2, title: 'Case B', type: 'Case', region: 'BEN', status: 'closed', date: '2025-02-05' },
   ];
 }
 
EOF
)